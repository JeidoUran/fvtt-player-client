// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

type GameId = string | number;

type GameConfig = {
  name: string;
  url: string;
  id?: GameId;
  cssId?: string;
};

type AppConfig = {
  games: GameConfig[];
  cachePath?: string;
  autoCacheClear?: boolean;
  customCSS?: string;
  ignoreCertificateErrors?: boolean;
  discordRP?: boolean;
};

interface ParticleOptions {
  count?: number;
  color?: string;
  alpha?: number;
  speedYMin?: number;
  speedYMax?: number;
  radiusMin?: number;
  radiusMax?: number;
  ampMin?: number;
  ampMax?: number;
}

type ThemeConfig = {
  background: string;
  backgrounds?: string[];
  backgroundColor: string;
  textColor: string;
  fontPrimary?: string;
  fontPrimaryUrl?: string;
  fontPrimaryName?: string;
  fontPrimaryFilePath?: string;
  fontSecondary?: string;
  fontSecondaryUrl?: string;
  fontSecondaryName?: string;
  fontSecondaryFilePath?: string;
  accentColor: string;
  buttonColorAlpha: number;
  buttonColor: string;
  buttonColorHoverAlpha: number;
  buttonColorHover: string;
  baseTheme?: string;
  particlesEnabled?: boolean;
  particleOptions?: ParticleOptions;
};

type UserData = {
  cachePath?: string;
  [index: GameId]: GameUserData;
  app?: AppConfig;
  theme?: ThemeConfig;
};

type GameUserData = {
  password?: number[];
  user: string;
  adminPassword?: number[];
};
type GameUserDataDecrypted = {
  password?: string;
  user: string;
  adminPassword?: string;
};

type SaveUserData = {
  gameId: GameId;
  password: string;
  user: string;
  adminPassword: string;
};

type WindowData = {
  gameId: GameId;
  autoLogin: boolean;
  selectedServerName?: string;
};

type WindowsData = {
  [index: number]: WindowData;
};

interface ServerStatusData {
  active: boolean;
  version: string;
  world: string;
  system: string;
  systemVersion: string;
  users: number;
  uptime: number;
}
